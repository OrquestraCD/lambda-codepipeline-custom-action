AWSTemplateFormatVersion: '2010-09-09'

Description: Example stack for Lambda-backed custom action type provider for CodePipeline.

Parameters:

    SlackWebhookUrl:
        Description: The full webhook URL for Slack notifications
        Type: String
        MinLength: 1

    ProviderName:
        Description: The name of the custom provider
        Type: String
        MinLength: 1
        Default: NotifyViaSlack

    ProviderCategory:
        Description: The category of the custom provider
        Type: String
        AllowedValues:
          - Source
          - Build
          - Deploy
          - Test
          - Invoke
          - Approval
        Default: Invoke

Resources:

    CodePipelineCustomActionFunction:
        Type: AWS::Lambda::Function
        Properties:
            Code:
                ZipFile: !Sub |
                    import boto3
                    import os
                    import json
                    from urllib.request import Request, urlopen
                    from urllib.error import URLError, HTTPError

                    def handler(event, context):
                        codepipeline_client = boto3.client('codepipeline')

                        job = codepipeline_client.poll_for_jobs(
                            actionTypeId={
                                'category': '${ProviderCategory}',
                                'owner': 'Custom',
                                'provider': '${ProviderName}',
                                'version': '1'
                            },
                            maxBatchSize=1
                        )['jobs'][0]
                        
                        codepipeline_client.acknowledge_job(
                            jobId=job['id'],
                            nonce=job['nonce']
                        )

                        try:
                            print("Starting action...")

                            # Section 1: Process action
                            slack_message = {
                                'text': json.dumps(job).encode('utf-8')
                            }
                            req = Request(os.environ['SLACK_WEBHOOK_URL'], json.dumps(slack_message).encode('utf-8'))
                            print(urlopen(req).read())
                            # End Section 1

                            print("Finished action.")
                        except:
                            codepipeline_client.put_job_failure_result(
                                jobId=job['id'],
                                failureDetails={
                                    'type': 'JobFailed',
                                    'message': 'Exception in action process'
                                }
                            )
                            return False
                        
                        codepipeline_client.put_job_success_result(
                            jobId=job['id']
                        )
                        return True
            
            Handler: index.handler
            Environment:
                Variables:
                    SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
            Role: !GetAtt 'LambdaExecutionRole.Arn'
            Runtime: python3.6
            Timeout: 30
    
    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Principal:
                        Service:
                          - lambda.amazonaws.com
                    Action:
                      - sts:AssumeRole
            Path: /
            Policies:
              - PolicyName: root
                PolicyDocument:
                    Version: '2012-10-17'
                    Statement:
                      - Effect: Allow
                        Action:
                          - logs:CreateLogGroup
                          - logs:CreateLogStream
                          - logs:PutLogEvents
                        Resource: arn:aws:logs:*:*:*
                      - Effect: Allow
                        Action:
                          - codepipeline:PollForJobs
                          - codepipeline:AcknowledgeJob
                          - codepipeline:GetJobDetails
                          - codepipeline:PutJobSuccessResult
                          - codepipeline:PutJobFailureResult
                        Resource: '*'
                      # Section 2: Other required permissions here
    
    CodePipelineCustomActionFunctionPermissions:
        Type: AWS::Lambda::Permission
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !GetAtt CodePipelineCustomActionFunction.Arn
            Principal: 'events.amazonaws.com'
    
    CodePipelineCustomActionTrigger:
        Type: "AWS::Events::Rule"
        Properties:
            State: "ENABLED"
            Description: !Sub "Handles the ${ProviderName} custom provider for CodePipeline."
            EventPattern: !Sub |
                {
                    "source": ["aws.codepipeline"],
                    "detail-type": ["CodePipeline Action Execution State Change"],
                    "detail": {
                        "type": {
                            "provider": ["${ProviderName}"]
                        },
                        "state": ["STARTED"]
                    }
                }
            Targets: 
              - Arn: !GetAtt CodePipelineCustomActionFunction.Arn
                Id: "CodePipelineCustomActionTrigger"
    
    CodePipelineCustomActionType: 
        Type: AWS::CodePipeline::CustomActionType
        Properties: 
            Category: !Ref ProviderCategory
            Provider: !Ref ProviderName
            Version: "1"
            InputArtifactDetails: 
                MaximumCount: 1
                MinimumCount: 1
            OutputArtifactDetails: 
                MaximumCount: 0
                MinimumCount: 0

Outputs:

    ProviderName:
        Description: A reference to the provider name
        Value: !Ref ProviderName
        Export:
            Name: example-custom-provider-name

    ProviderCategory:
        Description: A reference to the provider category
        Value: !Ref ProviderCategory
        Export:
            Name: example-custom-provider-category

    